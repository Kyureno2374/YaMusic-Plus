#!/usr/bin/env node

import { getLatestBuild } from './core/yandex-api';
import { BuildProcessor } from './core/build-processor';
import { ROOT_DIR } from '@config/paths';

async function main() {
  console.log('YaMusic Plus Patcher');
  console.log('====================\n');

  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...\n');

  const result = await getLatestBuild();

  if (result.isErr()) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', result.error.message);
    process.exit(1);
  }

  const builds = result.value;

  if (builds.length === 0) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫');
    process.exit(1);
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–±–æ—Ä–æ–∫: ${builds.length}\n`);

  const processor = new BuildProcessor(ROOT_DIR);

  for (const build of builds) {
    console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ ${build.version}`);
    console.log(`–†–∞–∑–º–µ—Ä: ${(build.size / 1024 / 1024).toFixed(2)} MB\n`);

    try {
      await processor.process(build);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(error as Error).message}`);
      process.exit(1);
    }
  }

  console.log('\nüéâ –í—Å–µ —Å–±–æ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
}

main();
